\section{Motivation}

Over the last 50 years, robotic and automation systems have transformed our world and greatly enhanced the quality of our daily life. With the development of science and technology, many intelligent systems that integrate machines, electronics, control and information technologies have emerged. Such systems can accomplish numerous tasks originally performed by humans and often prove superior in terms of precision, speed and cost. They can replace humans in the tasks that require repetitive and monotonous operations. For example, in the automotive industry, robotic and automation systems have been widely used for machining, welding, painting and assembling. From the point of engineering, these systems have lowered the product cost and improved the efficiency of production, thus greatly increasing the speed of industrialization. 

Robotic and automation systems also contribute to scientific research, especially in situations that require to conduct experiments in dangerous environments (e.g., nuclear factory) which are hazardous to human beings or some operating environments that may be beyond humans' capabilities of reach (e.g., other planets). In 2004, two famous robots---\textit{Spirit} and~\textit{Opportunity} were sent to Mars by NASA in a mission to explore the geology of this planet~\cite{Grotzinger:Sci:2014}. The primary goal of this mission is to analyze the rocks and soils in Mars to seek potential exist of water. With the help of automation systems, researchers can collect data much faster than ever before. For instance, high-throughput screening (HTS) systems~\cite{Hertzberg2000}, which are widely used in drug discovery, allow the researchers to conduct millions of experiments in a very short time. Such systems consist of several components, including sensing units, robotic manipulator, control system, etc. Besides data collection, these systems can also help analyze the data using intelligent software, which provides an ideal tool for data analysis in scientific research and frees researchers from the tedious and monotonous process of data analysis if done manually. This accelerates the development of scientific research to a great extent. 
% In~\cite{Eisenstein_2006}, Eisenstein argues that, ``soon, if a scientist does not understand some statistics or rudimentary data-handling technologies, he or she may not be considered to be a pure researcher and thus will simply become a dinosaur.'' 
% In data-driven science~\cite {Golub_2010}, where researchers have to deal with a huge amount of data collected in the experiments, 

%To use such bio-inspired methods to solve engineering problem, researchers need to have a good understand of the animal behaviors. However, the problem is that researchers are still in lack of a detailed understanding of the internal mechanisms underlying animal behaviors, which greatly limits the development of bi-inspired artificial intelligence and bio-inspired robotics. In order to make robots or computers mimic the highly intelligent behavior, computer scientists or roboticists should first build a model of target animal behavior based on knowledge in the field of ethology. 
%Studying animal behavior has several scientific advantages. It can help ethologists better understand the internal mechanism or causes, functions, development as well as natural evolution of such behaviors. From the point of engineering, researchers in robotics area, for instance, are more interested in getting inspiration from animal behavior and building robots that mimic the intelligent behavior to solve complex tasks in reality.
 
A particular scientific area that robotic and automation systems play a significant role is \textit{ethology}, which is 
the study of animal behavior~\cite{Bolhuis_2004}. Ethology is pursued not only because it is a subject of interest in itself, but also because the knowledge gained from it has several practical applications. For instance, models of animals' decision-making process can be used to predict their behavior in novel environments, which can help in making ecological conservation policy~\cite{Sutherland1998}. Knowledge about animal behavior has also been applied for solving computational problems~\citep{Floreano2008}, and for constructing biologically-inspired robotic agents~\citep{Meyer2008}. There are four types of questions to be investigated in ethology: questions concerning causes, functions, development and evolution~\cite{Bolhuis_2004}. Causes refer to the mechanisms of animals that are innate as well as the external/internal stimuli that affect such behavior. Functions concern what is the purpose of this behavior such as mating, aggregation or foraging. The development of animal behavior concerns how animals learn such behavior during their life and how such behavior is affected by experience, while evolution relates to how the behavior changes over generations in the course of natural evolution. Over centuries, these four questions have been investigated by ethologists primarily in well-controlled laboratories or outdoor environments. 

Before the emergence of computers, ethologists needed to observe the animals and analyze the data manually. They also needed to learn how to control the environmental conditions in a meaningful way to extract most of the information from the animals under investigation. Such process of analysis sometimes is time-consuming and tedious. With the help of intelligent and automation systems, nowadays researchers can conduct experiments much more efficiently. However, these systems are often secondary, and in most of the cases they are merely accomplishing mechanical and repetitive work. The question is whether we can build a machine/system that can accomplish the whole process of scientific investigation and automatically analyze experimental data, search for correlations between different elements, generate new hypotheses and devise new experimental conditions to be investigated. In other words, can we build a system which is able to automatically conduct scientific research without (or with minimal) human intervention? Recently, the development of ``robot scientists'' shows that such systems may be within reach~\cite{King_2009, Evans_2010, Waltz2010}. Following this motivation, this thesis aims to pave the way for further development in science automation~\cite{Evans_2010}, especially in the area of ethology. The ultimate goal of this thesis is to contribute to the study of animal behavior through developing an automated system identification/modeling method.

System identification is a process of modeling natural or artificial systems with observed data. It has drawn a large interest among researchers for decades~\cite{Ljung2010, Billings2013}. One application of system identification is the reverse engineering of agent behavior (biological organisms or artificial agents). Many studies have investigated how to deduce rules of agent behavior using system identification techniques based on various models~\cite{Shandelle2010}, one of which is an agent-based model~\cite{Bonabeau2002}, which simulates the complex behavior of a group of agents with relatively simple behavioral rules. The global behavior emerging from interaction within agents and between agents and environments is used for refining the model. Evolutionary computation which draws inspiration from biological evolution has proven to be a powerful method to automate the generation of models, especially for behaviors that are hard to formulate~\cite{Bongard2005_tevc, Bongard2007PNAS, Ruxton2008}. Evolutionary computation also provides a potential realization for automation science, as models evolve in an autonomous manner. It is the main technique that is investigated in this thesis for performing system identification.

A limitation of existing system identification methods is that they rely on predefined metrics, such as the sum of squared error, to measure the difference between the output of the models and that of the system under investigation. Model optimization then proceeds by minimizing the measured differences. However, for complex systems, defining a metric can be non-trivial and case-dependent. It may require much prior information about the systems. Moreover, an unsuitable metric may not well distinguish between good and bad models, or even bias the identification process. This thesis solves these problems by introducing a system identification method that does not rely on predefined metrics.

%The first population contains \textit{models}. The second population contains \textit{classifiers}. These two populations coevolve competitively. The fitness of the classifiers depends solely on their ability to distinguish the behavior of the replicas from the behavior of the agents under investigation.  The fitness of the models depends solely on their ability to mislead the classifiers into making the wrong judgment, that is, classifying them as the agent. In this way, the approach does not require any predefined metrics to quantify the difference between the behaviors of models and agents. 

\section{Problem Statement}

The investigated (agent) behaviors in this thesis are simulated by using computer or physical robots. The agent to be studied is put in an environment. Its behavior depends on interaction with the environment and with other agents in a group (if any). The machine will observe the agent's motion, and assumes that it is possible to track the position and orientation of the agent at discrete steps in time. In general, one could monitor a range of variables including the agent's motion, heart rate, morphology, body temperature, etc. Furthermore, the machine could also control the environmental stimuli that the agent responds to. The system identification task is to infer the observed behavior, in other words, the agent's behavioral rules. 

Three case studies are presented in this thesis. The first case study is about inferring swarm behaviors, which are emergent behaviors that arise from the interactions of numerous simple individuals~\cite{Camazine2001}. Learning about behaviors that are exhibited in a collective manner is particularly challenging, as the individuals not only interact with the environment but also with each other. Typically their motion appears stochastic and is difficult to predict~\cite{Dirk2011}. For instance, given a swarm of simulated fish, one would have to evaluate how close its behavior is to that of a real fish swarm, or how close the individual behavior of a simulated fish is to that of a real fish. Characterizing the behavior at the level of the swarm (that is, an emergent behavior) is challenging~\cite{Harvey:SI:2015}. It may require domain-specific knowledge and not discriminate among alternative individual rules that exhibit similar collective dynamics~\cite{Weitz2012}. Comparing behavior at the level of individuals is also difficult, as even the same individual fish in the swarm is likely to exhibit a fundamentally different trajectory every time it is being looked at. In this case study, the machine observes the motion of each individual in the swarm and needs to automatically infer the behavioral rules of the swarming agents.

The second case study is about inferring deterministic behaviors of a single agent, and investigating how the agent responds to the environmental stimuli. The machine has full control over the environmental stimuli that the agent responds to, and at the same time observes the agent's motion. We investigate a particular type of agent behavior; from the perspective of system identification, the agent behavior has low observability. That is, only randomly generating sequences of inputs (stimuli) is not sufficient to reveal all the hidden information of the agent and to infer its behavior. Instead, in order to extract all the agent's behavioral repertoire, the machine needs to interact with the agent in an active way and construct complex patterns of stimuli that help reinforce the learning process. 
%Typically we investigate how~\textit{Turing Learning} can be used for learning such deterministic behaviors which has low observability.

In the third case study, we investigate how to infer stochastic behaviors of a single agent. The agent still responds to the environmental stimuli; however, its behavior is not only determined by the environmental stimuli but also some probability. In other words, constructing a fixed sequence of stimulus may not trigger all the agent's behavioral repertoire as mentioned above. The machine needs to interact with the agent during the experimental process and dynamically change/control the environmental stimulus based on the agent's observed motion to reveal its hidden behavior. Inferring such stochastic behaviors through predefined metrics are challenging, as given the same sequence of inputs (stimuli), the agent would probably exhibit different behaviors. 

%Allowing a machine to exhibit such `intelligent' behavior and infer the agent's behavioral rules in an autonomous manner is challenging. 
%Whether this active learning proves to be superior to passive learning which is only based on observation is a question investigated in this thesis. 
%,and assumes that the intelligent system is possible to track the position of the animal at discrete steps in time
%The system is able to learn the observed behavior, in other words, the animal's actions in response to the different stimuli and combinations thereof. It constructs on-the-fly patterns of stimuli that help reinforce the learning process, so that the system can automatically extract the model of animal behavior. This interactive approach proves superior to learning through passive observation. 

\section{Contributions}

The main contribution of this thesis is a novel system identification approach---\textit{Turing Learning} which allows a machine to infer agent behavior in an autonomous manner. \textit{Turing Learning} uses a coevolutionary algorithm comprised of two populations. A population of models competitively coevolves with a population of classifiers. The classifiers observe the models and agents. The fitness of the classifiers depends solely on their ability to discriminate between them. Conversely, the fitness of the models depends solely on their ability to `trick' the classifiers into categorizing them as agents. Unlike other system identification methods, \textit{Turing Learning} does not rely on predefined metrics to gauge the difference between the behaviors of agents and models. 

The specific contributions are as follows:

\begin{enumerate}[1)]

\item A metric-free approach to automatically infer the behavioral rules of a group of homogeneous agents. Both the inferred model parameters and emergent global behaviors closely matched those of the original system. 

\item A metric-free approach to automatically produce a classifier (system) that can be used for detecting abnormal behaviors (e.g., faulty agents in a swarm). This was validated by both simulated and physical robot swarms.

\item A physical metric-free coevolutionary system for performing system identification. The system was validated through successfully inferring the behavioral rules of a physical robot swarm. 

\item A metric-free approach to automatically infer deterministic behavior of a single agent by interacting with it, rather than simply observing its behavior in a passive manner. This interactive approach proves superior to learning through passive observation. 

\item A metric-free approach to automatically infer stochastic behavior of a single agent through controlled interaction. The machine dynamically changes the environmental stimulus to interact with the agent on the fly. 

%The evolved classifiers show clear interaction with the agent through changing the environmental conditions (stimuli) based on the behavioral dynamics of the agent during the experimental process. The results are shown to be better than those obtained using metric-based system identification methods. 
% In this case, outputting a fixed sequence of input is not sufficient for the machine to extract all the information from the agent due to its stochastic features. 
\end{enumerate}

\section{Publications}

This thesis presents the author's own work. Some parts of the thesis have been published as original contributions to the scientific research. A preliminary work of Chapter~\ref{ch:swarm_simulation} was orally presented in a conference by the author:
\begin{itemize}
%
\item \textbf{W. Li}, M. Gauci and R. Gro{\ss}, ``Coevolutionary learning of swarm behaviors without metrics,'' \textit{Proceedings of 2014 Genetic and Evolutionary Computation Conference (GECCO 2014)}. ACM Press, Vancouver, Canada, 2014, pp. 201--208.
%
\end{itemize}

A preliminary work of Chapter~\ref{ch:interaction} was orally presented in a conference by the author of this thesis:
\begin{itemize}
%
\item \textbf{W. Li}, M. Gauci and R. Gro{\ss}, ``A coevolutionary approach to learn animal behavior through controlled interaction,'' \textit{Proceedings of 2013 Genetic and Evolutionary Computation Conference (GECCO 2013)}. ACM Press, Amsterdam, Netherlands, 2013, pp. 223--230.
%
\end{itemize}

A part of Chapters~\ref{ch:swarm_simulation} and~\ref{ch:swarm_physical_implementation} has been written as a paper and submitted to the following journal:
\begin{itemize}
%
\item \textbf{W. Li}, M. Gauci, J.Chen and R. Gro{\ss}, ``Reverse Engineering Swarm Behaviors Through Turing Learning,'' \textit{IEEE Transactions on Evolutionary Computation}, under review.
%
\end{itemize}

Apart from the work presented in this thesis, the author has also contributed to some other projects. This led to the following publications:

\begin{itemize}
%
\item M. Gauci, J. Chen, \textbf{W. Li}, T. J. Dodd, and R. Gro{\ss}, ``Self-organized aggregation without computation,'' \textit{The International Journal of Robotics Research}, vol. 33, no. 8, pp. 1145--1161, 2014.
%
\item J. Chen, M. Gauci, \textbf{W. Li}, A. Kolling and R. Gro{\ss}, ``Occlusion-based cooperative transport with a swarm of miniature mobile robots.''\textit{ IEEE Transactions on Robotics}, vol.31, no.2, pp. 307--321, 2015.
%
\item M. Gauci, J. Chen, \textbf{W. Li}, T. J. Dodd, and R. Gro{\ss}, ``Clustering objects with robots that do not compute,'' in \textit{Proceedings of the 13${\textrm{th}}$ International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2014)}. IFAAMAS Press, Paris, France, 2014, pp. 421--428.
%
\end{itemize}

During his PhD studies, the author has also been a Marie Curie Research Fellow with the Department of Mechanical Engineering, University of Western Ontario, Canada, where he contributed to the project of Mechanical Cognitivization. This led to the following publication:

\begin{itemize}
%\item G. Avigad, \textbf{W. Li}, A. Weiss, ``Enhancing Robustness through Mechanical Cognitivization'' \textit{International Journal on Advances in Intelligent Systems}, vol.7, no.3, pp. 652--661, 2014.
%
\item G. Avigad, \textbf{W. Li}, A. Weiss, ``Mechanical Cognitivization: A kinematic system proof of concept'' \textit{Adaptive Behavior}, vol.23, no.3, pp. 155--170, 2015.
%
\end{itemize}

\section{Thesis Outline}

This thesis is structured as follows:

\begin{itemize}
\item Chapter~\ref{ch:literature_review} describes the background of the thesis as well as the related work presented in the literature. 

\item Chapter~\ref{ch:swarm_simulation} introduces the metric-free system identification method---\textit{Turing Learning}. It is applied to learn two swarm behaviors (self-organized aggregation~\cite{Gauci2014_ijrr} and self-organized object clustering~\cite{Melvin2014_aamas}) through observation. This chapter is organized as follows. Section~\ref{sec:methodology_swarm_simulation} describes the implementation of~\textit{Turing Learning} (Section~\ref{sec:turing_learning_swarm_simulation}) and the two swarm behaviors (Section~\ref{sec:case_studies_swarm_simulation}) investigated in this thesis. Section~\ref{sec:simulation_platform_setups} introduces the simulation platform (Section~\ref{sec:platform_swarm_simulation}) and simulation setups (Section~\ref{sec:setup_swarm_simulation}) for performing coevolution runs. Section~\ref{sec:results_swarm_simulation} presents the results obtained from the two case studies. Section~\ref{sec:analysis_evolved_models_swarm_simulation} systematically analyzes the evolution of models, through objectively measuring the quality of the evolved models in terms of local and global behaviors. Section~\ref{sec:coevolutionary_dynamics_simulation_swarm_simulation} investigates the coevolutionary dynamics. Section~\ref{sec:analysis_evolved_classifiers_swarm_simulation} systematically investigates the evolution of classifiers, showing how to construct a robust classifier system to potentially detect abnormal behaviors in the swarm. Section~\ref{sec:observing_a_subset_agents_swarm_simulation} studies the effect of observing only a subset of agents in the swarm and the results obtained. Section~\ref{sec:evolving_control_and_morphology_swarm_simulation} presents a study where an aspect of the agents' morphology (their field of view) and brain (controller) are inferred simultaneously. Section~\ref{sec:evolving_other_behaviors_swarm_simulation} shows the results of using~\textit{Turing Learning} to learn other swarm behaviors.. Section~\ref{sec:noise_study_swarm_simulation} presents a noise study. Section~\ref{sec:summary_simulation_swarm} summaries the findings in this chapter.

\item Chapter~\ref{ch:swarm_physical_implementation} presents a real-world validation of~\textit{Turing Learning} to infer the behaviors of a swarm of physical robots. Section~\ref{sec:experimental_platform_swarm_physical} introduces the physical platform, which includes the robot arena (Section~\ref{sec:robot_arena_physical_swarm}), the robot platform and sensors implementation (Section~\ref{sec:robot_platform_sensor_implementation}). Section~\ref{motion_capture_and_video_processing_swarm_physical} details the tracking system, including motion capture (Section~\ref{sec:motion_capture_swarm_physical}) and video processing (Section~\ref{sec:video_processing_physical_swarm}). Section~\ref{sec:coevolution_physical_robots_swarm_physical} describes the programs executed by each component (machine, agent and replica) during the coevolutionary learning process. Section~\ref{sec:experimental_setup_swarm_physical} describes the experimental setup. Section~\ref{sec:experimental_results_swarm_physical} discusses the results obtained. This includes the analysis of the evolved models (Section~\ref{sec:analysis_evolved_model_physical_swarm}) and the analysis of the evolved classifiers (Section~\ref{sec:analysis_evolved_classifier_physical_swarm}). Section~\ref{sec:analysis_algorithm} analyzes the sensitivity of~\textit{Turing Learning} for individual failure during the experimental process. Section~\ref{sec:summary_swarm_physical} summaries the results obtained and discusses the findings in this chapter.

\item Chapter~\ref{ch:interaction} investigates how to infer the deterministic and stochastic behaviors of an agent through~\textit{Turing Learning}. The machine not only observes the behavior of the agent but also interacts with it through changing the stimulus that influences the agent's behavior. This chapter is organized as follows. Section~\ref{sec:methodology_interaction} describes the methodology, illustrating how \textit{Turing Learning} is extended to have interactive ability. The deterministic and stochastic behaviors under investigation are presented as two case studies (Sections~\ref{sec:case_study_one_deterministic_interaction} and~\ref{sec:case_study_two_stochastic_interaction}). Section~\ref{sec:deterministic_behavior_interaction} describes the deterministic behavior. Section~\ref{sec:simulation_setup_deterministic_interaction} presents the simulation setup. Section~\ref{sec:results_interaction_deterministic} presents the results of inferring the deterministic behavior. Section~\ref{sec:stochastic_behavior_interaction} describes the stochastic behavior for the general case using a state machine. Section~\ref{sec:simulation_setup_stochastic_interaction} presents the simulation setup for inferring the stochastic behavior. Section~\ref{sec:results_interaction_stochastic_2states} and~\ref{sec:results_interaction_stochastic_3states} present the obtained results for the case of $2$ states and $3$ states, respectively. Section~\ref{sec:summary_interaction} summaries the chapter.

\item Chapter~\ref{ch:conclusion} concludes the thesis and discusses the future work. 

\end{itemize}
