\section{Summary of Findings}

This thesis presented a novel system identification method---\textit{Turing Learning} for inferring agent behavior. \textit{Turing Learning} does not rely on predefined metrics for measuring the difference between the agents and models. Instead, it uses coevolution to simultaneously generate models and classifiers, which substitute the metrics. The classifiers are rewarded for distinguishing between agents and models. The models are rewarded for making classifiers judge them as agents. In order to `trick' the classifiers to judge them as agents, the models need to mimic their behaviors. 

The merits of~\textit{Turing Learning} were demonstrated through successfully inferring various agent behaviors ranging from swarm behaviors to deterministic/stochastic behaviors of single agents. When inferring an unknown swarm behavior, it is challenging to define meaningful metrics that quantitatively measure the difference (e.g., motion) between the models and agents. Due to the numerous interactions among agents and between agents and the environment, the motion of each agent in the swarm is stochastic. We have shown that observing the swarm is sufficient to infer the behavioral rules of the swarming agents. The evolved models show good correspondence to the original agents in terms of individual behaviors (parameters) and global behaviors. The evolved classifiers performed collectively well and could potentially be used for detecting abnormal behaviors (e.g., faulty agents) in the swarm. It was also shown that swarm behaviors can be directly inferred from the motion of a single agent in the group, as long as the group size is sufficiently large. This may have significant implications for the study of animal collectives, as in practice it may be difficult to track a large number of animals in a group. 

We extended the ability of the classifiers in \textit{Turing Learning} for inferring deterministic/stochastic behaviors of single agents, so that the classifiers can interact with the agent through controlling the environmental stimulus that the agent responds to. The interactive learning approach proved to be superior to passive learning (i.e., learning where the agents are only observed) in terms of model convergence rate and model accuracy, especially when the agent behavior under investigation had low observability. In the case study about inferring deterministic behaviors of single agents, the results showed that it is possible to infer the behaviors through coevolving a fixed sequence of inputs (in lieu of classifiers) and models. In this case, the interaction between the classifiers and agent was of limited `intelligence' as they only needed to output a fixed sequence no matter what the agent's observed behavior was. 

In a third case study, \textit{Turing Learning} was applied to infer the stochastic behavior of single agents. It was shown that through actively interacting with the agent during the experimental trial, the classifiers could `intelligently' change the stimulus in response to the agent's observed behavior, and thereby extract the hidden information from the agent. This intelligent behavior was also observed in humans when scientists tried to investigate an animal's behavior in response to stimuli~\cite{Emily_2012}. As the agent's behavior under investigation is stochastic, it is not feasible to evolve a fixed sequence of inputs to extract all the agent's behavioral information. Given the same input, the agent would probably behave differently and this makes it hard to optimize the models using predefined metrics. We compared the results obtained by \textit{Turing Learning} and two metric-based system identification methods, and showed that \textit{Turing Learning} learned the agent behavior significantly better than the other two methods. This highlights the benefits of~\textit{Turing Learning} in inferring complex agent behaviors.
%In other words, the classifiers could dynamically capture the motion of the agent to adjust the environmental stimulus.

\section{Future work}

In spite of the encouraging results obtained when applying \textit{Turing Learning} to infer agent behaviors, we do not claim that this method can be directly used for modeling animal behaviors. There are still questions to be discussed before conducting experiments on animals. Some future work is provided as follows.

\begin{itemize}

\item In the thesis, the models were represented by a set of parameters that govern behavioral rules of the agents. As was argued before, this makes it feasible to objectively gauge the quality of the models through comparing them with the ground truth. In the future, we will try to evolve the structure of the models as well (e.g., using genetic programming or artificial neural networks). 

\item The swarm behaviors investigated in this thesis were deterministic in terms of the individual's behavioral rules (). In the future, we could apply \textit{Turing Learning} to learn swarming behavioral rules that are stochastic. In fact, we have shown that if the original controller of the aggregation behavior investigated in Chapter~\ref{ch:swarm_simulation} is stochastic, it is still possible to achieve the same global behavior~\cite{Gauci2014_ijrr}. For the stochastic aggregation controller, in each state, the agent has a probability of switching to another state (i.e., its binary sensor is flipped with certain probability). In this case, \textit{Turing Learning} could be used for inferring both the controller and the probability.

\item \textit{Turing Learning} could be applied to learn more complex behaviors (for example, when the agents have more states or rules). When the behaviors become more complex, instead of analyzing only the motion of individual agents, more information (such as number of the agent's neighbors or its internal states) may need to be provided to the classifiers.

%\item In chapter 5, we successfully learned the behavior of a single agent behavior through interaction. In the future, we would like to use the classifier to interact with a swarm of agents. 

\item In principle, \textit{Turing Learning} is applicable to infer human behavior. It could evolve models that aim to pass the Turing Test~\citep{Turing1950}, at least with regards to some specific subset of human behavior. In this case, the classifiers could then act as Reverse Turing Tests, which could be applied in situations where a machine needs to distinguish human agents from artificial ones. This is done, for example, by the ``Completely Automated Public Turing test to tell Computers and Humans Apart'' system (CAPTCHA)~\citep{captcha2008}, which is widely used for internet security purposes. For example, an exciting application of \textit{Turing Learning} is reverse engineering the hand writing of human beings. Given a collection of signatures from a human being, we could coevolve models which are computer programs that automatically generate signatures and classifiers (e.g., neural networks) that distinguish between signatures from the human and those generated by models. 
%Once the models are obtained, we can use the models to generate electronic signature similar to that of the human being.

\end{itemize}

